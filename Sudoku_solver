import numpy as np

puzzle = [[5,3,0,0,7,0,0,0,0],
          [6,0,0,1,9,5,0,0,0],
          [0,9,8,0,0,0,0,6,0],
          [8,0,0,0,6,0,0,0,3],
          [4,0,0,8,0,3,0,0,1],
          [7,0,0,0,2,0,0,0,6],
          [0,6,0,0,0,0,2,8,0],
          [0,0,0,4,1,9,0,0,5],
          [0,0,0,0,8,0,0,7,9]]

puzzle2 =[[4,0,0,0,0,0,9,0,8],
          [0,5,9,0,0,0,0,0,0],
          [0,0,0,1,4,0,0,3,5],
          [5,0,6,0,0,0,0,9,1],
          [0,0,0,0,8,0,0,0,0],
          [2,9,0,0,0,0,8,0,6],
          [6,4,0,0,3,7,0,0,0],
          [0,0,0,0,0,0,3,8,0],
          [8,0,2,0,0,0,0,0,7]]


def possible(puzzle,row,col,n):
    if n in puzzle[row]: return False
    if n in list(zip(*puzzle))[col]: return False
    for i in range(3):
        if n in puzzle[row//3*3+i][col//3*3:col//3*3+3]: return False
    return True

def sudoku(puzzle):
    for row in range(9): 
        for col in range(9): #rows and cols
            if puzzle[row][col] == 0:
                for n in range(1,10): #1
                    if possible(puzzle,row,col,n):
                        puzzle[row][col]=n #if possible change the number
                        out = sudoku(puzzle) # go to next layer
                        if out: return puzzle
                        puzzle[row][col]=0 #if you reach this line it means the assigned number didn't work in one of the next layers
                                               #therefore, you set it to zero because the "possible" function might reject a potential possibility
                                               #Notice that the depth doesn't matter because of the previous, it can be one nest level
                                               #Above with no consequence
                return #You return to the previous layer if all values have been tried, if loop (1) finishes it means a mistake so you backtrack
    return True

    

sudoku(puzzle)
sudoku(puzzle2)
